@baseUrl = http://localhost:3000

### ===============================================
### MULTI-SCHEDULE OVERFLOW REDISTRIBUTION TEST
### Tests overflow redistribution across morning, afternoon, and evening schedules
### ===============================================

### STEP 1: Register Doctor (MULTI-SCHEDULE TEST)
# @name registerDoctorDemo
POST {{baseUrl}}/api/auth/doctor/register
Content-Type: application/json

{
  "email": "dr.multischedule.test.2025@schedula.com",
  "password": "MultiSchedule2025!",
  "name": "Dr. Multi Schedule",
  "specialization": "All Day Surgery",
  "yearsExperience": 25
}

###

### STEP 2: Register Patient (MULTI-SCHEDULE TEST)
# @name registerPatientDemo
POST {{baseUrl}}/api/auth/patient/register
Content-Type: application/json

{
  "email": "patient.multischedule.test.2025@schedula.com",
  "password": "MultiPatient2025!",
  "name": "Multi Schedule Patient",
  "age": 40,
  "gender": "male",
  "phoneNumber": "+1555017777"
}

###

### STEP 3: Login Users (MULTI-SCHEDULE TEST)
# @name loginDoctorDemo
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "dr.multischedule.test.2025@schedula.com",
  "password": "MultiSchedule2025!"
}

###

# @name loginPatientDemo
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "patient.multischedule.test.2025@schedula.com",
  "password": "MultiPatient2025!"
}

###

@doctorToken = {{loginDoctorDemo.response.body.access_token}}
@patientToken = {{loginPatientDemo.response.body.access_token}}
@doctorId = {{loginDoctorDemo.response.body.entityId}}
@patientId = {{loginPatientDemo.response.body.entityId}}

### STEP 4: Create Morning Schedule (8:00-12:00)
# @name createMorningSchedule
POST {{baseUrl}}/api/doctors/{{doctorId}}/recurring-schedules
Authorization: Bearer {{doctorToken}}
Content-Type: application/json

{
  "name": "Morning Schedule",
  "startTime": "08:00",
  "endTime": "12:00",
  "slotDuration": 30,
  "bufferTime": 5,
  "maxAppointments": 4,
  "daysOfWeek": [1,2,3,4,5],
  "weeksAhead": 1,
  "allowOverrides": true,
  "autoGenerate": true
}

###

### STEP 5: Create Afternoon Schedule (13:00-17:00)
# @name createAfternoonSchedule
POST {{baseUrl}}/api/doctors/{{doctorId}}/recurring-schedules
Authorization: Bearer {{doctorToken}}
Content-Type: application/json

{
  "name": "Afternoon Schedule",
  "startTime": "13:00",
  "endTime": "17:00",
  "slotDuration": 30,
  "bufferTime": 5,
  "maxAppointments": 4,
  "daysOfWeek": [1,2,3,4,5],
  "weeksAhead": 1,
  "allowOverrides": true,
  "autoGenerate": true
}

###

### STEP 6: Create Evening Schedule (18:00-22:00)
# @name createEveningSchedule
POST {{baseUrl}}/api/doctors/{{doctorId}}/recurring-schedules
Authorization: Bearer {{doctorToken}}
Content-Type: application/json

{
  "name": "Evening Schedule",
  "startTime": "18:00",
  "endTime": "22:00",
  "slotDuration": 30,
  "bufferTime": 5,
  "maxAppointments": 4,
  "daysOfWeek": [1,2,3,4,5],
  "weeksAhead": 1,
  "allowOverrides": true,
  "autoGenerate": true
}

###

### STEP 7: Book Morning Appointments (3 appointments in morning slot)
# @name bookMorningAppointment1
POST {{baseUrl}}/api/appointments
Authorization: Bearer {{patientToken}}
Content-Type: application/json

{
  "doctorId": "{{doctorId}}",
  "recurringScheduleId": "{{createMorningSchedule.response.body.id}}",
  "date": "2025-08-06",
  "startTime": "08:00",
  "endTime": "08:30"
}

###
# @name bookMorningAppointment2
POST {{baseUrl}}/api/appointments
Authorization: Bearer {{patientToken}}
Content-Type: application/json

{
  "doctorId": "{{doctorId}}",
  "recurringScheduleId": "{{createMorningSchedule.response.body.id}}",
  "date": "2025-08-06",
  "startTime": "08:35",
  "endTime": "09:05"
}

###
# @name bookMorningAppointment3
POST {{baseUrl}}/api/appointments
Authorization: Bearer {{patientToken}}
Content-Type: application/json

{
  "doctorId": "{{doctorId}}",
  "recurringScheduleId": "{{createMorningSchedule.response.body.id}}",
  "date": "2025-08-06",
  "startTime": "09:10",
  "endTime": "09:40"
}

###

### STEP 8: Shrink Morning Schedule (8:00-9:00, maxAppointments=1)
### This should cause 2 appointments to overflow and redistribute to afternoon/evening
# @name shrinkMorningSchedule
POST {{baseUrl}}/api/doctors/{{doctorId}}/elastic-schedule
Authorization: Bearer {{doctorToken}}
Content-Type: application/json

{
  "date": "2025-08-06",
  "startTime": "08:00",
  "endTime": "09:00",
  "slotDuration": 30,
  "bufferTime": 5,
  "maxAppointments": 1,
  "adjustExisting": true
}

###
@morningElasticScheduleId = {{shrinkMorningSchedule.response.body.id}}

### STEP 9: Check Morning Overflow Detection
### Should show 2 appointments as overflow
# @name getMorningOverflow
GET {{baseUrl}}/api/appointments/elastic-schedule/{{morningElasticScheduleId}}/overflow
Authorization: Bearer {{doctorToken}}
Content-Type: application/json

###

### STEP 10: Check Morning Overflow with Priority
### Should show bucket='morning' and searchPriority=['same-day afternoon', 'same-day evening', 'next day']
# @name getMorningOverflowWithPriority
GET {{baseUrl}}/api/appointments/elastic-schedule/{{morningElasticScheduleId}}/overflow-with-priority
Authorization: Bearer {{doctorToken}}
Content-Type: application/json

###

### STEP 11: Redistribute Morning Overflow
### Should redistribute to afternoon/evening schedules on same day
# @name redistributeMorningOverflow
POST {{baseUrl}}/api/appointments/elastic-schedule/{{morningElasticScheduleId}}/redistribute-overflow
Authorization: Bearer {{doctorToken}}
Content-Type: application/json

{}

###

### STEP 12: Verify Final Appointments Distribution
### Should show:
### - 1 appointment in morning (8:00-8:30)
### - 2 appointments redistributed to afternoon/evening
# @name getAllAppointmentsFinal
GET {{baseUrl}}/api/appointments/doctor/{{doctorId}}
Authorization: Bearer {{doctorToken}}
Content-Type: application/json

###
