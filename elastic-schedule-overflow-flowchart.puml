@startuml Elastic Schedule Overflow & Redistribution Flow
!theme aws-orange
skinparam backgroundColor #f8f9fa
skinparam defaultFontSize 10
skinparam activity {
  BackgroundColor #e3f2fd
  BorderColor #1976d2
  FontColor #0d47a1
}
skinparam decision {
  BackgroundColor #fff3e0
  BorderColor #f57c00
  FontColor #e65100
}

title **Elastic Schedule Overflow Detection & Intelligent Redistribution**\n//Multi-Schedule Time Bucket System//

start

:Doctor creates **Elastic Schedule Override**
(shrinks existing schedule);
note right
  Example: Morning schedule 10:00-12:00 → 10:00-11:05
  maxAppointments: 2 → 1
end note

:System identifies **existing appointments**
on target date;

:Check each appointment against
**new schedule constraints**;

partition "**Overflow Detection Logic**" {
  repeat
    :Take next appointment;
    
    if (Appointment start time\n< new schedule start?) then (yes)
      :Mark as **TIME_BOUNDARY_OVERFLOW**;
      :Add to overflow list;
    elseif (Appointment end time\n> new schedule end?) then (yes)
      :Mark as **TIME_BOUNDARY_OVERFLOW**;
      :Add to overflow list;
    else (within time bounds)
      :Count fitting appointments;
      if (Count > maxAppointments?) then (yes)
        :Mark as **CAPACITY_OVERFLOW**;
        :Add to overflow list;
      else (fits)
        :Keep appointment **SCHEDULED**;
        note right: ✅ Appointment preserved
      endif
    endif
    
  repeat while (More appointments?)
}

if (Any overflow appointments?) then (no)
  :✅ **No redistribution needed**;
  stop
else (yes)
  :Cancel overflow appointments;
  note right: Status changed to 'cancelled'
endif

partition "**Time Bucket Classification**" {
  repeat
    :Take next overflow appointment;
    
    if (Original time < 12:00?) then (yes)
      :Classify as **MORNING** bucket;
      :Set search priority:
      **1.** Same-day afternoon
      **2.** Same-day evening  
      **3.** Next day morning
      **4.** Next day afternoon
      **5.** Next day evening;
    elseif (Original time 12:00-17:00?) then (yes)
      :Classify as **AFTERNOON** bucket;
      :Set search priority:
      **1.** Same-day evening
      **2.** Next day morning
      **3.** Next day afternoon
      **4.** Next day evening;
    else (> 17:00)
      :Classify as **EVENING** bucket;
      :Set search priority:
      **1.** Next day morning
      **2.** Next day afternoon
      **3.** Next day evening;
    endif
    
  repeat while (More overflow appointments?)
}

partition "**Intelligent Redistribution**" {
  :Initialize **assignedSlotsThisSession** Map
  for conflict prevention;
  
  repeat
    :Take next overflow appointment;
    :Get search priority list for bucket;
    
    repeat
      :Take next priority target;
      
      if (Target = "same-day afternoon"?) then (yes)
        :Search doctor's afternoon schedules
        on **same date** (13:00-17:00);
      elseif (Target = "same-day evening"?) then (yes)
        :Search doctor's evening schedules  
        on **same date** (18:00+);
      elseif (Target = "next day morning"?) then (yes)
        :Search doctor's morning schedules
        on **next date** (<12:00);
      elseif (Target = "next day afternoon"?) then (yes)
        :Search doctor's afternoon schedules
        on **next date** (13:00-17:00);
      else (next day evening)
        :Search doctor's evening schedules
        on **next date** (18:00+);
      endif
      
      partition "**Slot Availability Check**" {
        repeat
          :Check next available slot;
          
          if (Slot already assigned\nin this session?) then (yes)
            :❌ Skip slot (conflict prevention);
          elseif (Slot conflicts with\nexisting appointments?) then (yes)
            :❌ Skip slot (database conflict);
          elseif (Slot fits appointment\nduration + buffer?) then (no)
            :❌ Skip slot (duration mismatch);
          else (✅ Available)
            :Mark slot as **assigned in session**;
            :Create new appointment
            with new date/time;
            :✅ **Redistribution successful**;
            break
          endif
          
        repeat while (More slots in schedule?)
      }
      
      if (Appointment redistributed?) then (yes)
        break
      endif
      
    repeat while (More priority targets?)
    
    if (No suitable slot found?) then (yes)
      :⚠️ **Cannot redistribute**
      Keep as cancelled;
      note right
        Rare case: all schedules full
        or no compatible slots
      end note
    endif
    
  repeat while (More overflow appointments?)
}

:Return **redistribution summary**;
note right
  - Preserved appointments
  - Successfully redistributed  
  - Failed redistributions
end note

:✅ **Process Complete**
Updated appointment statuses
in database;

stop

@enduml
